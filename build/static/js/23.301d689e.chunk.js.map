{"version":3,"sources":["components/UserNav/UserNav.js","pages/users/Subscription.jsx"],"names":["UserNav","sm","className","id","asideMenu","map","data","index","key","NavItem","nav_item","ClassName","class","Title","title","Url","url","IconName","icon_name","ActiveClassName","active_link","connect","state","cart","shop","favorite","auth","user","subscribeOption","site","subscriptions","pending","dispatch","AllSubscriptions","email","getSubscriptions","setSubscriptions","options","props","useState","updated","setUpdated","show","type","message","setMessage","subscription","useEffect","a","handleChange","e","target","name","checked","announcement","sale_invitation","weekly_newsletter","unsubscribe","handleSubmit","preventDefault","axios","post","URL","__SET_SUBSCRIPTIONS","subscriber_id","then","res","setTimeout","catch","error","response","totalItem","length","totalFavorite","items","loading","favorite_item","cartItem","menuActive","fluid","noGutters","Body","onSubmit","Group","controlId","Check","label","disabled","onChange","variant","onClose","dismissible"],"mappings":"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","file":"static/js/23.301d689e.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'react-bootstrap'\nimport Menu from '../LiComponent/MenuComponents'\nimport asideMenu from \"../../inc/menu/order_nav_menu\";\n\nfunction UserNav() {\n  return (\n    <Col sm=\"2\">\n      <aside className=\"userAsideBar pt-3 clearfix shadow\" id=\"userAsideBar\">\n        <nav className=\"userNav\">\n          <ul className=\"userNavBar\">\n            {asideMenu.map((data, index) =>\n              <Menu\n                key={index}\n                NavItem={data.nav_item}\n                ClassName={data.class}\n                Title={data.title}\n                Url={data.url}\n                IconName={data.icon_name}\n                ActiveClassName={data.active_link}\n              />\n            )}\n          </ul>\n        </nav>\n      </aside>\n    </Col>\n  );\n}\n\nexport default UserNav;\n","import React,{useState, useEffect} from 'react';\nimport { Container, Row, Col, Card, Form, Button, Alert} from 'react-bootstrap';\nimport  HeaderComponent from \"../../components/header/Header\";\nimport  MobileHeader from \"../../components/header/MobileHeader\";\nimport { connect } from 'react-redux';\nimport UserNav from \"../../components/UserNav/UserNav\";\nimport PageLoader from \"../../components/pageLoader/PageLoaderComponent\";\nimport axios from 'axios'\nimport { URL } from '../../constants/config'\nimport { getSubscriptions, setSubscriptions } from '../../redux/actions/siteActions'\n\nconst Subscription = (props) => {\n\n  const { auth, AllSubscriptions, pending, subscribeOption} = props\n  const [updated, setUpdated] = useState(false)\n  const [message, setMessage] = useState({ show: false, type: 'unknown', message: '' })\n\n  const subscription = { ...subscribeOption}\n\n  useEffect(() => {\n    (async function(){      \n      AllSubscriptions(auth.email);\n    })();\n  }, [auth.email, updated])\n\n  const handleChange = (e) => {\n\n    if((e.target.name === 'unsubscribe') && (e.target.checked)){\n        return props.setSubscriptions({\n            announcement       : false,\n            sale_invitation    : false,\n            weekly_newsletter  : false,\n            unsubscribe        : true\n        })\n    }\n\n    //setSubscription({ ...subscription, [e.target.name]: e.target.checked })\n    props.setSubscriptions({ ...subscription, [e.target.name]: e.target.checked })\n  }\n\n  const handleSubmit = async(e) => {\n\n    e.preventDefault();\n\n    axios.post(URL.__SET_SUBSCRIPTIONS, {\n\n      email: auth.email,\n      subscriber_id: auth.id,\n      announcement: subscription.announcement,\n      sale_invitation: subscription.sale_invitation,\n      weekly_newsletter: subscription.weekly_newsletter,\n      unsubscribe: subscription.unsubscribe\n\n     }).then(res => {\n\n       setMessage({ show: true, type: 'success', message: res.data.message });\n       setUpdated(true);\n       setTimeout(() => {\n         setMessage({ show: false, type: 'unknown', message: '' })\n       }, 5000);\n\n    }).catch(error => {\n\n      if(error.response){\n          setMessage({ show: true, type: 'danger', message: error.response.data.message });\n          setUpdated(false);\n          setTimeout(() => {\n            setMessage({ show: false, type: 'unknown', message: '' })\n          }, 5000);\n      }\n    })\n\n  }\n\n  const totalItem = props.cart.length;\n  const totalFavorite = props.favorite.items.length;\n\n  return (\n    <>\n      <PageLoader loading={pending} />\n      <div className=\"allWrapper\">\n        <HeaderComponent\n          favorite_item={totalFavorite}\n          cartItem={totalItem}\n          menuActive={true}\n        />\n        <MobileHeader\n          favorite_item={totalFavorite}\n          cartItem={totalItem}\n          menuActive={true}\n         />\n        <div className=\"userBodyArea clearfix\" id=\"userBodyArea\">\n          <Container fluid={true} className=\"pl-0 pr-0\">\n            <Row noGutters>\n              <UserNav />\n              <Col>\n                <main\n                  className=\"userMainContent clearfix bgImage bgImg03\"\n                  id=\"userMainContent\"\n                >\n                  <section\n                    className=\"myOrderArea secGap clearfix\"\n                    id=\"myOrderArea\"\n                  >\n                    <Container fluid={true}>\n                      <Row>\n                        <Col sm=\"12\">\n                          <Card>\n                            <Card.Body className=\"pt-5\">\n                              <h2 className=\"cardSecTitle mb-3\">\n                                Manage email subscription\n                              </h2>\n                              <h5 className=\"cardSubtitle mb-2\">\n                                Please choose which types of emails you would\n                                like to receive from us\n                              </h5>\n                              <Form\n                                className=\"profileSettingsForm\"\n                                onSubmit={handleSubmit}\n                              >\n                                <Row>\n                                  <Col sm=\"12\">\n                                    <Form.Group\n                                      controlId={\"formCheckbox1\"}\n                                      className={\"formCheckbox mt-2\"}\n                                    >\n                                      <Form.Check\n                                        type={\"checkbox\"}\n                                        label={\"Announcements\"}\n                                        name='announcement'\n                                        disabled={subscription.unsubscribe && true}\n                                        checked={subscription.announcement}\n                                        onChange={handleChange}\n                                      />\n                                    </Form.Group>\n                                  </Col>\n\n                                  <Col sm=\"12\">\n                                    <Form.Group\n                                      controlId=\"formCheckbox2\"\n                                      className=\"formCheckbox mt-2\"\n                                    >\n                                      <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Sale invitations\"\n                                        name=\"sale_invitation\"\n                                        disabled={subscription.unsubscribe && true}\n                                        checked={subscription.sale_invitation}\n                                        onChange={handleChange}\n                                      />\n                                    </Form.Group>\n                                  </Col>\n\n                                  <Col sm=\"12\">\n                                    <Form.Group\n                                      controlId=\"formCheckbox3\"\n                                      className=\"formCheckbox mt-2\"\n                                    >\n                                      <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Weekly Newsletter\"\n                                        name=\"weekly_newsletter\"\n                                        disabled={subscription.unsubscribe && true}\n                                        checked={subscription.weekly_newsletter}\n                                        onChange={handleChange}\n                                      />\n                                    </Form.Group>\n                                  </Col>\n\n                                  <Col sm=\"12\">\n                                    <Form.Group\n                                      controlId=\"formCheckbox4\"\n                                      className=\"formCheckbox mt-2\"\n                                    >\n                                      <Form.Check\n                                        type=\"checkbox\"\n                                        label=\"Unsubscribe\"\n                                        name=\"unsubscribe\"\n                                        checked={subscription.unsubscribe}\n                                        onChange={handleChange}\n                                      />\n                                    </Form.Group>\n                                  </Col>\n                                  <Col sm=\"12\">\n                                    <Button\n                                      className={\"mt-3\"}\n                                      type=\"submit\"\n                                      name=\"save\"\n                                    >\n                                      Save\n                                    </Button>\n                                  </Col>\n                                </Row>\n                              </Form>\n                            </Card.Body>\n                          </Card>\n                        </Col>\n                      </Row>\n\n                      <Alert show={message.show} variant={message.type} onClose={() => setMessage({ ...message, show: false })} dismissible>\n                        <p>{message.message}</p>\n                      </Alert>\n\n                    </Container>\n                  </section>\n                </main>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </div>\n    </>\n  );\n}\n\n\nconst mapStateToProps = state => ({\n  cart              : state.shop.cart,\n  favorite          : state.favorite,\n  auth              : state.auth.user,\n  subscribeOption   : state.site.subscriptions,\n  pending           : state.site.pending\n})\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    AllSubscriptions       : (email) => dispatch(getSubscriptions(email)),\n    setSubscriptions    : (options)  => dispatch(setSubscriptions(options))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Subscription);\n"],"sourceRoot":""}