{"version":3,"sources":["components/UserNav/UserNav.js","components/paymentMethodComponent/PaymentMethodComponent.jsx","components/paymentMethodComponent/AddPaymentMethod.jsx","pages/users/PaymentPage.jsx"],"names":["UserNav","sm","className","id","asideMenu","map","data","index","key","NavItem","nav_item","ClassName","class","Title","title","Url","url","IconName","icon_name","ActiveClassName","active_link","PaymentMethodComponent","props","useState","showCardAlert","setShowCardAlert","message","setMessage","card","setCard","reset","setReset","handleOnChange","e","target","name","value","Card","Body","Row","Col","Form","Alert","show","variant","onClose","dismissible","Group","Label","format","placeholder","mask","card_number","onChange","loading","src","alt","val","max","length","Number","limit","substring","mm","yy","offset","controlId","type","ccv","Button","onClick","preventDefault","isNaN","setTimeout","callback","CheckToggle","children","eventKey","decoratedOnClick","useAccordionToggle","document","getElementById","checked","Check","custom","label","connect","dispatch","setPayment","info","cardInfo","setCardInfo","paymentInfo","Accordion","defaultActiveKey","onSelect","selectedKey","payment_type","Collapse","state","cart","shop","favorite","payment","auth","user","deleteCard","deletePayment","update","updatePaymentMethod","subscriptions","email","getSubscriptions","visible","setVisible","cardAlert","setCardAlert","totalItem","totalFavorite","items","card_id","setCardId","visibleUpdateModal","setVisibleUpdateModal","cards","isEmpty","setData","cardNumber","setCardNumber","month","setMonth","year","setYear","cvv","setCvv","handleVisibility","handleClose","handleShow","useEffect","pending","Header","favorite_item","cartItem","menuActive","MobileHeader","Container","fluid","noGutters","Table","responsive","last_num","slice","existData","find","Modal","onHide","closeButton","Footer"],"mappings":"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","file":"static/js/13.b5602931.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'react-bootstrap'\nimport Menu from '../LiComponent/MenuComponents'\nimport asideMenu from \"../../inc/menu/order_nav_menu\";\n\nfunction UserNav() {\n  return (\n    <Col sm=\"2\">\n      <aside className=\"userAsideBar pt-3 clearfix shadow\" id=\"userAsideBar\">\n        <nav className=\"userNav\">\n          <ul className=\"userNavBar\">\n            {asideMenu.map((data, index) =>\n              <Menu\n                key={index}\n                NavItem={data.nav_item}\n                ClassName={data.class}\n                Title={data.title}\n                Url={data.url}\n                IconName={data.icon_name}\n                ActiveClassName={data.active_link}\n              />\n            )}\n          </ul>\n        </nav>\n      </aside>\n    </Col>\n  );\n}\n\nexport default UserNav;\n","import React, {useState} from 'react';\nimport {Card, Form, Row, Col, Button, Alert} from \"react-bootstrap\";\nimport NumberFormat from 'react-number-format';\nfunction PaymentMethodComponent(props) {\n  \n  const [showCardAlert, setShowCardAlert] = useState(false);\n  const [message, setMessage] = useState(\"This information is not valid!\");\n  const [card, setCard] = useState({})\n  const [reset,setReset] = useState(false)\n\n  const handleOnChange = (e) => {\n      setReset(false);\n        setCard({\n            ...card,\n            [e.target.name]:e.target.value\n        })\n    }\n\n  const handleOnClick = (e) => {\n\n      e.preventDefault();\n       if (!card.card_number && !card.mm && !card.yy && !card.ccv) {\n         setMessage(\"Field should not be empty\");\n         setShowCardAlert(true);\n         return setTimeout(() => setShowCardAlert(false), 2000);\n       }\n      if (card.card_number && isNaN(Number(card.card_number[18]))) {\n         setMessage(\"Card Number should be 16 digit\");\n         setShowCardAlert(true)\n        return setTimeout(() => setShowCardAlert(false), 2000);\n      }\n      if (!card.card_number) {\n        setMessage(\"Card Number should not empty\");\n        setShowCardAlert(true);\n        return setTimeout(() => setShowCardAlert(false), 2000);\n      }\n      if (!card.mm) {\n        setMessage(\"MM should not be empty\");\n        setShowCardAlert(true)\n        return setTimeout(() => setShowCardAlert(false), 2000);\n      }\n      if (!card.yy) {\n        setMessage(\"YY should not be empty\");\n        setShowCardAlert(true)\n        return setTimeout(() => setShowCardAlert(false), 2000);\n      }\n      if (!card.ccv) {\n        setMessage(\"CVV should not be empty\");\n        setShowCardAlert(true);\n        return setTimeout(() => setShowCardAlert(false), 2000);\n      }\n\n\n      else if (card.card_number && card.mm && card.yy && card.ccv) {\n        props.callback(card);\n        setReset(true);\n           }\n  }\n\n  //Card Input Format\n  const limit = (val, max) => {\n    if (val.length === 1 && val[0] > max[0]) {\n      val = '0' + val;\n    }\n\n    if (val.length === 2) {\n      if (Number(val) === 0) {\n        val = '01';\n\n        //this can happen when user paste number\n      } else if (val > max) {\n        val = max;\n      }\n    }\n\n    return val;\n  }\n\n  const cardExpiryMonth = (val) => {\n    return limit(val.substring(0, 2), '12');\n  }\n\n  const cardExpiryYear = (val) => {\n    return val.substring(0,2);\n  }\n\n  return (\n    <Card.Body className=\"addPaymentCard m-0 p-0\">\n      <Row>\n        <Col className=\"p-0\">\n          <Form className=\"selectPaymentOption\">\n            <div className=\"formRadioGroup bgGray mb-2\">\n              <div className=\"payInfoDetails clearfix\">\n                <div className=\"m-2\">\n                  <Alert\n                    show={showCardAlert}\n                    variant=\"danger\"\n                    onClose={() => setShowCardAlert(false)}\n                    dismissible\n                  >\n                    <p>{message}</p>\n                  </Alert>\n                </div>\n                <div className=\"cardInfoForm p-3\">\n                  <Row className=\"align-items-center\">\n                    <Col sm=\"10\">\n                      <Form.Group>\n                        <Form.Label>Card number</Form.Label>\n                        <NumberFormat\n                          format=\"#### #### #### ####\"\n                          placeholder=\"____ ____ ____ ____\"\n                          mask={[\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\"\n                          ]}\n                          name=\"card_number\"\n                          className=\"form-control\"\n                          value={reset ? \" \" : card.card_number}\n                          onChange={handleOnChange}\n                        />\n                      </Form.Group>\n                    </Col>\n\n                    <Col>\n                      <img loading=\"lazy\" src=\"\" alt=\"none\" />\n                    </Col>\n                  </Row>\n\n                  <Row className=\"align-items-center justify-content-between\">\n                    <Col sm=\"4\">\n                      <Form.Group>\n                        <Form.Label>Expiry date</Form.Label>\n                        <ul className=\"cardPayFiled d-flex align-items-center justify-content-start\">\n                          <li className=\"width-45\">\n                            <NumberFormat\n                              id=\"card-mm\"\n                              format={cardExpiryMonth}\n                              placeholder=\"MM\"\n                              mask={[\"M\", \"M\"]}\n                              name=\"mm\"\n                              value={reset ? \" \" : card.mm}\n                              onChange={handleOnChange}\n                            />\n                          </li>\n                          <li className=\"cardBl\">/</li>\n                          <li className=\"width-45\">\n                            <NumberFormat\n                              id=\"card-yy\"\n                              format={cardExpiryYear}\n                              placeholder=\"YY\"\n                              mask={[\"Y\", \"Y\"]}\n                              name=\"yy\"\n                              value={reset ? \" \" : card.yy}\n                              onChange={handleOnChange}\n                            />\n                          </li>\n                        </ul>\n                        {/* end of cardPayFiled */}\n                      </Form.Group>\n                    </Col>\n\n                    <Col sm={{ offset: 4 }}>\n                      <Form.Group controlId=\"card-cvv\" className=\"ccv-group\">\n                        <Form.Label className=\"ccv-input\"> CVV </Form.Label>\n                        <NumberFormat\n                          type=\"text\"\n                          id=\"card-cvv\"\n                          name=\"ccv\"\n                          format=\"###\"\n                          placeholder=\"CVV\"\n                          value={reset ? \" \" : card.ccv}\n                          onChange={handleOnChange}\n                        />\n                      </Form.Group>\n                    </Col>\n\n                    <Col sm=\"2\">\n                      <img loading=\"lazy\" src=\"\" alt=\"none\" />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col>\n                      <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                        onClick={handleOnClick}\n                      >\n                        Add\n                      </Button>\n                    </Col>\n                  </Row>\n                </div>\n              </div>\n            </div>\n          </Form>\n        </Col>\n      </Row>\n    </Card.Body>\n  );\n}\n\nexport default PaymentMethodComponent;\n","import React, {useState} from \"react\";\nimport { connect } from 'react-redux';\nimport { setPayment } from '../../redux/actions/authActions';\nimport {Form, Accordion, useAccordionToggle} from \"react-bootstrap\";\nimport PaymentMethodComponent from './PaymentMethodComponent';\n\nfunction CheckToggle({ children, eventKey, title, name }) {\n\n    const decoratedOnClick = useAccordionToggle(eventKey, () =>{\n        if(eventKey === 1){\n\n            document.getElementById('ch-2').checked=false\n            document.getElementById('ch-3').checked=false\n        }\n        if(eventKey === 2){\n\n            document.getElementById('ch-1').checked=false\n            document.getElementById('ch-3').checked=false\n        }\n        if(eventKey === 3){\n\n            document.getElementById('ch-1').checked=false\n            document.getElementById('ch-2').checked=false\n        }\n    })\n\n    return (\n        <Form.Check\n            custom\n            className=\"ml-3\"\n            type=\"radio\"\n            label={title}\n            name=\"payment\"\n            id={`ch-${eventKey}`}\n            onClick={decoratedOnClick}\n        >\n            {children}\n\n        </Form.Check>\n    );\n}\n\nfunction AddPaymentMethod(props) {\n\n    const [cardInfo, setCardInfo] = useState({});\n\n    const handleAccordionOnSelect = (selectedKey) => {\n        switch(Number(selectedKey)){\n            case 1:\n                setCardInfo({\n                   payment_type: 'MPESA'\n                });\n                break;\n            case 2:\n                setCardInfo({\n                    payment_type: 'VISA'\n                });\n                break;\n            case 3:\n                setCardInfo({\n                    payment_type: 'PAYPAL'\n                });\n                break;\n            default:\n                setCardInfo({\n                    ...cardInfo\n                });\n        }\n    }\n\n    const paymentInfo = (value) => {\n        const info = {\n            ...cardInfo,\n            ...value\n        }\n        props.setPayment(info);\n    }\n\n\n  return (<>\n\n    <Accordion defaultActiveKey=\"0\" onSelect={handleAccordionOnSelect}>\n\n            <div className=\"payment-header-card mt-3\">\n                <CheckToggle eventKey=\"1\" title=\"Mpesa\" />\n            </div>\n            <Accordion.Collapse eventKey=\"1\">\n                <PaymentMethodComponent callback={paymentInfo}/>\n            </Accordion.Collapse>\n\n\n            <div className=\"payment-header-card mt-3\">\n                <CheckToggle eventKey=\"2\" title=\"Visa\" />\n            </div>\n            <Accordion.Collapse eventKey=\"2\">\n                <PaymentMethodComponent callback={paymentInfo} />\n            </Accordion.Collapse>\n\n            <div className=\"payment-header-card mt-3\">\n                <CheckToggle eventKey=\"3\" title=\"PayPal\" />\n            </div>\n            <Accordion.Collapse eventKey=\"3\">\n                <PaymentMethodComponent callback={paymentInfo}/>\n            </Accordion.Collapse>\n\n    </Accordion>\n  </>);\n}\n\nconst mapDispatchToProps = (dispatch) =>({\n    setPayment: (info) => dispatch(setPayment(info))\n})\n\nexport default connect(null, mapDispatchToProps)(AddPaymentMethod);","import React, { useState , useEffect} from \"react\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"lodash/isEmpty\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  Table,\n  Button,\n  Modal,\n  Form\n} from \"react-bootstrap\";\nimport NumberFormat from \"react-number-format\";\nimport {\n  deletePayment,\n  updatePaymentMethod\n} from \"../../redux/actions/authActions\";\nimport HeaderComponent from \"../../components/header/Header\";\nimport MobileHeader from \"../../components/header/MobileHeader\";\nimport UserNav from \"../../components/UserNav/UserNav\";\nimport AddPaymentMethod from \"../../components/paymentMethodComponent/AddPaymentMethod\";\nimport \"./assets/css/user.css\";\nimport PageLoader from \"../../components/pageLoader/PageLoaderComponent\";\nimport { getSubscriptions } from '../../redux/actions/siteActions'\n\nconst PaymentPage = props => {\n  const {auth,subscriptions} = props\n  const [visible, setVisible] = useState(false);\n  const [cardAlert, setCardAlert] = useState(false);\n  const totalItem = props.cart.length;\n  const totalFavorite = props.favorite.items.length;\n  const [card_id, setCardId] = useState(null);\n\n  const [visibleUpdateModal, setVisibleUpdateModal] = useState(false);\n  const cards = !isEmpty(props.payment) ? [...props.payment] : [];\n  const [data, setData] = useState([...cards]);\n  const [cardNumber, setCardNumber] = useState('');\n  const [month, setMonth] = useState('');\n  const [year, setYear] = useState(\"\");\n  const [cvv, setCvv] = useState(\"\");\n\n  const handleVisibility = e => {\n    e.preventDefault();\n    setVisible(!visible);\n  };\n\n  const onDeletePayment = e => {\n    e.preventDefault();\n    props.deleteCard(e.target.id);\n    return setCardAlert(false);\n  };\n\n  const handleClose = () => setCardAlert(false);\n\n  const handleShow = e => {\n    e.preventDefault();\n    setCardId(e.target.id);\n    setCardAlert(true);\n  };\n\n  useEffect(() => {\n    const {email}=auth;\n    setData({\n      id: card_id,\n      card_number:cardNumber,\n      mm: month,\n      yy:year,\n      ccv: cvv,\n    });\n    subscriptions(email)\n    return ()=>{\n      setData({\n        id: card_id,\n        card_number:cardNumber,\n        mm: month,\n        yy:year,\n        ccv: cvv,\n      });\n      subscriptions(email)\n    }\n  }, [cardNumber,card_id, year, month, cvv,auth,subscriptions]);\n\n  const updatePaymentMethod = e => {\n    e.preventDefault();\n\n    props.update(data);\n    return setVisibleUpdateModal(false);\n  };\n\n  //Card Input Format\n  const limit = (val, max) => {\n    if (val.length === 1 && val[0] > max[0]) {\n      val = \"0\" + val;\n    }\n\n    if (val.length === 2) {\n      if (Number(val) === 0) {\n        val = \"01\";\n\n        //this can happen when user paste number\n      } else if (val > max) {\n        val = max;\n      }\n    }\n\n    return val;\n  };\n\n  const cardExpiryMonth = val => {\n    return limit(val.substring(0, 2), \"12\");\n  };\n\n  const cardExpiryYear = val => {\n    return val.substring(0, 2);\n  };\n\n  return (\n      <>\n        <PageLoader loading={props.favorite.pending} />\n        <div className=\"allWrapper\">\n          <HeaderComponent\n              favorite_item={totalFavorite}\n              cartItem={totalItem}\n              menuActive={true}\n          />\n          <MobileHeader\n              favorite_item={totalFavorite}\n              cartItem={totalItem}\n              menuActive={true}\n          />\n          <div className=\"userBodyArea clearfix\" id=\"userBodyArea\">\n            <Container fluid={true} className=\"pl-0 pr-0\">\n              <Row noGutters>\n                <UserNav />\n                <Col>\n                  <main\n                      className=\"userMainContent clearfix bgImage bgImg03\"\n                      id=\"userMainContent\"\n                  >\n                    <section\n                        className=\"myOrderArea secGap clearfix\"\n                        id=\"myOrderArea\"\n                    >\n                      <Container fluid={true}>\n                        <Row>\n                          <Col>\n                            <Card className=\"fade-in\">\n                              <Card.Body>\n                                <Table responsive className=\"cardTable\">\n                                  <thead>\n                                  <tr>\n                                    <th> Payment methods </th>\n                                    <th> Actions</th>\n                                  </tr>\n                                  </thead>\n\n                                  <tbody>\n                                  {cards.length === 0 ? (\n                                      <></>\n                                  ) : (\n                                      cards.map(card => {\n                                        const last_num = card.card_number\n                                            ? card.card_number.slice(-4)\n                                            : \"\";\n                                        return (\n                                            <tr key={card.id} className=\"cardNumberTable\">\n                                              <td className=\"cardInfotd\">\n                                                <div className=\"cardPaymentDetails\">\n                                                  <h3 className=\"payTitle\">\n                                                    {card.payment_type}\n                                                    <span className=\"cardNumber\">\n                                                  **** **** **** {last_num}\n                                                </span>\n                                                  </h3>\n                                                  <p className=\"payExp\">\n                                                    Expires in {card.mm}/{card.yy}\n                                                  </p>\n                                                </div>\n                                              </td>\n                                              <td className=\"actionBtntd d-flex\">\n                                                <Button\n                                                    className=\"btn btnActionUpdate\"\n                                                    value={card.id}\n                                                    onClick={e => {\n                                                      e.preventDefault();\n                                                      const existData = cards.find(\n                                                          payment =>\n                                                              payment.id ===\n                                                              Number(e.target.value)\n                                                      );\n                                                      setCardNumber(\n                                                          existData.card_number\n                                                      );\n                                                      setMonth(existData.mm);\n                                                      setYear(existData.yy);\n                                                      setCvv(existData.ccv);\n                                                      setCardId(e.target.value);\n\n                                                      return setVisibleUpdateModal(true);\n                                                    }}\n                                                >\n                                                  Update\n                                                </Button>\n                                                <Button\n                                                    id={card.id}\n                                                    className=\"btn btnActionDelete\"\n                                                    onClick={handleShow}\n                                                >\n                                                  Delete\n                                                </Button>\n                                              </td>\n                                            </tr>\n                                        );\n                                      })\n                                  )}\n                                  </tbody>\n                                </Table>\n                                {!visible ? (\n                                    <Button\n                                        className=\"btn btn-primary btnSm\"\n                                        onClick={handleVisibility}\n                                    >\n                                      Add payment method\n                                    </Button>\n                                ) : (\n                                    \"\"\n                                )}\n\n                                {visible ? (\n                                    <div className=\"add-payment d-flex align-items-center mt-4\">\n                                      <h3>Add payment method</h3>\n                                      <Button\n                                          className=\"btn btn-danger ml-3 btn-cancel\"\n                                          onClick={handleVisibility}\n                                      >\n                                        Cancel\n                                      </Button>\n                                    </div>\n                                ) : (\n                                    \"\"\n                                )}\n\n                                {visible ? <AddPaymentMethod /> : \"\"}\n                              </Card.Body>\n                            </Card>\n                          </Col>\n                        </Row>\n                      </Container>\n                    </section>\n                  </main>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </div>\n\n        {/*  Modal*/}\n        <Modal show={cardAlert} onHide={handleClose}>\n          <Modal.Header closeButton className=\"border-0\"></Modal.Header>\n          <Modal.Body className=\"cardModalCss\">\n            Are you sure ? You want to delete it..!\n          </Modal.Body>\n          <Modal.Footer className=\"border-0\">\n            <Button\n                id={card_id}\n                name=\"confirm\"\n                variant=\"primary\"\n                onClick={onDeletePayment}\n            >\n              Confirm\n            </Button>\n\n            <Button className=\"btn modalCancelBtn\" onClick={handleClose}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        {/* <Modal.Header closeButton className=\"border-0\"></Modal.Header> */}\n        <Modal\n            show={visibleUpdateModal} //visibleUpdateModal\n            onHide={e => setVisibleUpdateModal(false)}\n        >\n          <Modal.Header closeButton className=\"border-0\"></Modal.Header>\n          <Modal.Body>\n            <Form>\n              <div className=\"cardInfoForm p-3\">\n                <Row className=\"align-items-center\">\n                  <Col sm=\"12\">\n                    <Form.Group>\n                      <Form.Label>Card number</Form.Label>\n                      <NumberFormat\n                          format=\"#### #### #### ####\"\n                          placeholder=\"____ ____ ____ ____\"\n                          mask={[\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\",\n                            \"_\"\n                          ]}\n                          name=\"card_number\"\n                          className=\"form-control\"\n                          value={cardNumber}\n                          onChange={e => {\n                            e.preventDefault();\n                            return setCardNumber(e.target.value);\n                          }}\n                      />\n                    </Form.Group>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm=\"8\">\n                    <Form.Group>\n                      <Form.Label>Expiry date</Form.Label>\n                      <ul className=\"justify-content-start d-flex\">\n                        <li className=\"ModalFromInput width-45\">\n                          <NumberFormat\n                              id=\"card-mm\"\n                              format={cardExpiryMonth}\n                              placeholder=\"MM\"\n                              mask={[\"M\", \"M\"]}\n                              name=\"mm\"\n                              value={month}\n                              onChange={e => {\n                                e.preventDefault();\n                                return setMonth(e.target.value);\n                              }}\n                          />\n                        </li>\n                        <li className=\"cardBl\">/</li>\n                        <li className=\"ModalFromInput width-45\">\n                          <NumberFormat\n                              id=\"card-yy\"\n                              format={cardExpiryYear}\n                              placeholder=\"YY\"\n                              mask={[\"Y\", \"Y\"]}\n                              name=\"yy\"\n                              value={year}\n                              onChange={e => {\n                                e.preventDefault();\n                                return setYear(e.target.value);\n                              }}\n                          />\n                        </li>\n                      </ul>\n                    </Form.Group>\n                  </Col>\n\n                  <Col sm=\"4\">\n                    <Form.Group className=\"ccv-group\">\n                      <Form.Label className=\"ccv-input\"> CVV </Form.Label>\n                      <NumberFormat\n                          type=\"text\"\n                          id=\"card-cvv\"\n                          name=\"ccv\"\n                          format=\"###\"\n                          placeholder=\"CVV\"\n                          value={cvv}\n                          onChange={e => {\n                            e.preventDefault();\n                            return setCvv(e.target.value);\n                          }}\n                      />\n                    </Form.Group>\n                  </Col>\n                </Row>\n              </div>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer className=\"border-0\">\n            <Button\n                name=\"confirm\"\n                variant=\"primary\"\n                id={card_id}\n                onClick={updatePaymentMethod}\n            >\n              Confirm\n            </Button>\n            <Button\n                className=\"btn modalCancelBtn\"\n                onClick={e => {\n                  e.preventDefault();\n                  return setVisibleUpdateModal(false);\n                }}\n            >\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  cart      : state.shop.cart,\n  favorite  : state.favorite,\n  payment   : state.auth.user.payment,\n  auth      : state.auth.user\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteCard    : id => dispatch(deletePayment(id)),\n  update        : data => dispatch(updatePaymentMethod(data)),\n  subscriptions : (email) => dispatch(getSubscriptions(email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PaymentPage);\n"],"sourceRoot":""}