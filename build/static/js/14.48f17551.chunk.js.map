{"version":3,"sources":["components/UserNav/UserNav.js","components/FromComponents/inputComponent2.jsx","pages/users/UserProfile.jsx"],"names":["UserNav","sm","className","id","asideMenu","map","data","index","key","NavItem","nav_item","ClassName","class","Title","title","Url","url","IconName","icon_name","ActiveClassName","active_link","InputFrom","LabelId","TypeName","LabelTitle","Name","Value","Placeholder","handleOnChange","Form","Group","Label","htmlFor","Control","type","name","value","placeholder","onChange","SelectFrom","categories","callback","useState","categoryId","setCategoryId","useEffect","state","JSON","parse","window","localStorage","getItem","category_id","auth","user","as","event","preventDefault","Number","target","style","borderColor","undefined","element","category","connect","site","status","cart","shop","favorite","dispatch","getUser","updateUser","info","update","removeStatus","emptyStatus","subscriptions","email","getSubscriptions","props","items","message","success","alert","setAlert","formData","setFormData","totalFavorite","length","totalItem","clearAlert","setTimeout","clearTimeout","e","loading","pending","Header","favorite_item","cartItem","menuActive","MobileHeader","Container","fluid","Row","noGutters","Col","Card","Body","first_name","last_name","phone","password","new_password","repeat_new_password","Alert","show","variant","onClose","dismissible","Button","onClick","isEmpty","String"],"mappings":"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","file":"static/js/14.48f17551.chunk.js","sourcesContent":["import React from 'react';\nimport { Col } from 'react-bootstrap'\nimport Menu from '../LiComponent/MenuComponents'\nimport asideMenu from \"../../inc/menu/order_nav_menu\";\n\nfunction UserNav() {\n  return (\n    <Col sm=\"2\">\n      <aside className=\"userAsideBar pt-3 clearfix shadow\" id=\"userAsideBar\">\n        <nav className=\"userNav\">\n          <ul className=\"userNavBar\">\n            {asideMenu.map((data, index) =>\n              <Menu\n                key={index}\n                NavItem={data.nav_item}\n                ClassName={data.class}\n                Title={data.title}\n                Url={data.url}\n                IconName={data.icon_name}\n                ActiveClassName={data.active_link}\n              />\n            )}\n          </ul>\n        </nav>\n      </aside>\n    </Col>\n  );\n}\n\nexport default UserNav;\n","import React, { useState, useEffect } from 'react';\nimport { Form } from 'react-bootstrap';\n\nfunction InputFrom({ LabelId, TypeName, LabelTitle, Name, Value, Placeholder, ClassName, handleOnChange }) {\n\n    return (\n        <Form.Group className={ClassName}>\n            <Form.Label htmlFor={LabelId} > {LabelTitle} </Form.Label>\n            <Form.Control type={TypeName} id={LabelId} name={Name} value={(Value)? Value : ''} placeholder={Placeholder} onChange={handleOnChange} />\n        </Form.Group>\n    )\n}\n\n//Select From Components\nfunction SelectFrom({ LabelTitle, categories, callback }) {\n\n    const [categoryId, setCategoryId] = useState(0);\n\n    useEffect(() => {\n        const state = JSON.parse(window.localStorage.getItem('state'));\n        const category_id = (state !== null && state.auth.user.category_id) ? state.auth.user.category_id : 0;\n        setCategoryId(category_id);\n    }, []);\n\n    const handleOnchange = (event) => {\n        event.preventDefault();\n        setCategoryId(Number(event.target.value));\n        callback({\n            category_id: event.target.value\n        });\n        return ((event.target.value === 'Select Category') ? (event.target.style.borderColor = 'rgb(255,0,97)') : event.target.style.borderColor = '');\n    }\n\n    return (\n        <Form.Group>\n            <Form.Label> {LabelTitle} </Form.Label>\n            <Form.Control as=\"select\" value={categoryId} onChange={handleOnchange}>\n                <option value={0}>Select Category</option>\n                {(categories === undefined) ? [] : categories.map((element, index) => (\n                    <option\n                        key={index}\n                        id={index}\n                        value={element.id}\n                    >\n                        {element.category}\n                    </option>\n                ))}\n            </Form.Control>\n        </Form.Group>\n    )\n}\n\n\nexport {\n    InputFrom,\n    SelectFrom\n}\n","import React, { useState, useEffect } from 'react';\nimport { connect  } from 'react-redux';\nimport {getUser, update, emptyStatus} from '../../redux/actions/authActions';\nimport isEmpty from 'lodash/isEmpty';\nimport {Container, Row, Col, Card, Form, Button, Alert} from 'react-bootstrap';\nimport { InputFrom, SelectFrom } from '../../components/FromComponents/inputComponent2';\nimport  HeaderComponent from \"../../components/header/Header\";\nimport  MobileHeader from \"../../components/header/MobileHeader\";\nimport UserNav from \"../../components/UserNav/UserNav\";\nimport PageLoader from \"../../components/pageLoader/PageLoaderComponent\";\nimport './assets/css/user.css';\nimport { getSubscriptions } from '../../redux/actions/siteActions'\n\nconst UserProfile = (props) => {\n\n  const { auth: { user }, favorite: { items }, cart, status: { message, success }, getUser, subscriptions } = props;\n\n    const [alert, setAlert] = useState({status: false, type: 'danger', message: ''});\n    const [formData, setFormData] = useState({...user});\n    const totalFavorite = items.length;\n    const totalItem = cart.length;\n\n    useEffect(() => {\n\n        const clearAlert = setTimeout(() => {\n            props.removeStatus();\n            setAlert({status: false, message:''});\n        }, 5000);\n\n        if(typeof success !== undefined && success === false){\n            setAlert({\n                status: true,\n                type: 'danger',\n                message: message\n            });\n            return () =>  clearTimeout(clearAlert);\n        }else if(typeof success !== undefined && success === true){\n            setAlert({\n                status: true,\n                type: 'success',\n                message: message\n            });\n            return () =>  clearTimeout(clearAlert);\n        }\n\n        getUser();\n        subscriptions(user.email);\n    }, [getUser, message, success]);\n\n\n    const categoryData = (data) => {\n        if(data.category_id !== undefined || data.category_id !== 'Select Category')\n            formData.category_id = Number(data.category_id);\n    }\n\n    //console.log('form data: ', formData);\n\n    const handleOnChange = (e) => {\n        e.preventDefault();        \n        setFormData({\n            ...formData,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const clearAlert = setTimeout(() => {\n            setAlert({status: false, message:''});\n        }, 5000);\n\n        if(isEmpty(formData)){\n            setAlert({\n                status: true,\n                type: 'info',\n                message: 'Nothing changed and updated.'\n            });\n\n            return () =>  clearTimeout(clearAlert);\n        }\n\n        if( formData.new_password !== undefined ){\n            if(formData.password !== undefined ){\n\n                if(String(formData.new_password) !== String(formData.repeat_new_password)){\n                   setAlert({\n                       status: true,\n                       type: 'danger',\n                       message: 'New and Repeat Passwords did not match.'\n                   });\n                   return () =>  clearTimeout(clearAlert);\n                }\n            }else {\n                setAlert({\n                    status: true,\n                    type: 'danger',\n                    message: 'Enter Current Password to set new Password.'\n                });\n                return () =>  clearTimeout(clearAlert);\n            }\n        }\n                \n        props.updateUser(formData);\n    }\n\n  return (\n    <>\n      <PageLoader loading={props.favorite.pending} />\n      <div className=\"allWrapper\">\n        <HeaderComponent\n          favorite_item={totalFavorite}\n          cartItem={totalItem}\n          menuActive={true}\n        />\n        <MobileHeader favorite_item={totalFavorite} cartItem={totalItem} />\n        <div className=\"userBodyArea clearfix\" id=\"userBodyArea\">\n          <Container fluid={true} className=\"pl-0 pr-0\">\n            <Row noGutters>\n              <UserNav />\n              <Col>\n                <main\n                  className=\"userMainContent clearfix bgImage bgImg03\"\n                  id=\"userMainContent\"\n                >\n                  <section\n                    className=\"myOrderArea secGap clearfix\"\n                    id=\"myOrderArea\"\n                  >\n                    <Container fluid={true}>\n                      <Row>\n                        <Col>\n                          <Card>\n                            <Card.Body>\n                              <div\n                                className=\"userProfileBody clearfix\"\n                                id=\"userProfileBody\"\n                              >\n                                <h2 className=\"cardSecTitle mb-4\">\n                                  Profile settings\n                                </h2>\n                                <Form className=\"profileSettingsForm\">\n                                  <Row>\n                                    <Col sm=\"6\">\n                                      <SelectFrom\n                                        LabelTitle=\"Category\"\n                                        categories={\n                                          props.categories !== undefined\n                                            ? props.categories\n                                            : []\n                                        }\n                                        callback={categoryData}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"First Name\"\n                                        TypeName=\"text\"\n                                        Name=\"first_name\"\n                                        Value={formData.first_name}\n                                        Placeholder=\"First Name\"\n                                        handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Last Name\"\n                                        TypeName=\"text\"\n                                        Name=\"last_name\"\n                                        Value={formData.last_name}\n                                        Placeholder=\"Last Name\"\n                                       handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Email Address\"\n                                        TypeName=\"email\"\n                                        Name=\"email\"\n                                        Value={formData.email}\n                                        Placeholder=\"Email Address\"\n                                        handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Phone Number\"\n                                        TypeName=\"text\"\n                                        Name=\"phone\"\n                                        Value={formData.phone}\n                                        Placeholder=\"Phone Number\"\n                                       handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"12\">\n                                      <hr className=\"hrBorder\" />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Current Password\"\n                                        TypeName=\"password\"\n                                        Name=\"password\"\n                                        Value={formData.password}\n                                        Placeholder=\"Current Password\"\n                                       handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Create New Password\"\n                                        TypeName=\"password\"\n                                        Name=\"new_password\"\n                                        Value={formData.new_password}\n                                        Placeholder=\"Create New Password\"\n                                        handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"6\">\n                                      <InputFrom\n                                        LabelTitle=\"Repeat new password\"\n                                        TypeName=\"password\"\n                                        Name=\"repeat_new_password\"\n                                        Value={formData.repeat_new_password}\n                                        Placeholder=\"Repeat new password\"\n                                       handleOnChange = {handleOnChange}\n                                      />\n                                    </Col>\n\n                                    <Col sm=\"12\">\n                                      <Alert\n                                        show={alert.status}\n                                        variant={alert.type}\n                                        onClose={() =>\n                                          setAlert({ ...alert, status: false })\n                                        }\n                                        dismissible\n                                      >\n                                        <p>{alert.message}</p>\n                                      </Alert>\n                                      <Button\n                                        type=\"submit\"\n                                        className=\"primary\"\n                                        onClick={handleSubmit}\n                                      >\n                                        Save\n                                      </Button>\n                                    </Col>\n                                  </Row>\n                                </Form>\n                              </div>\n                            </Card.Body>\n                          </Card>\n                        </Col>\n                      </Row>\n                    </Container>\n                  </section>\n                </main>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n\n    categories: state.site.categories,\n    auth: state.auth,\n    status: state.auth.status,\n    cart: state.shop.cart,\n    favorite: state.favorite,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    getUser         : () => dispatch(getUser()),\n    updateUser      : (info) => dispatch(update(info)),\n    removeStatus    : () => dispatch(emptyStatus()),\n    subscriptions   : (email) => dispatch(getSubscriptions(email)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);\n"],"sourceRoot":""}